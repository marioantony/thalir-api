type Query {
    allAdmins: [Admin]
    allBooks: [Book]
    allVehicleOwners:[VehicleOwner]
    allSchedules:[Schedule]
    allFarmers:[Farmer]
    loginUsers:[FarmerLogin]
    admin(id: ID!): Admin
    book(id: ID!): Book
    vehicleOwner(id:ID!):VehicleOwner
    schedule(id: ID!):Schedule
    farmer(id: ID!):Farmer
    farmerLogin(id: ID!):FarmerLogin

}

type Mutation {
    addAdmin(username: String!, password: String!):Admin!
    updateAdmin(id: ID!, username: String!, password: String!): Admin!
    deleteAdmin(id: ID!): Boolean

    addBook(requestedBag: Int!, acceptedBag: Int!, totalAmount: Float!, schedule_id: ID!, farmer_id: ID!): Book!
    updateBook(id: ID!, requestedBag: Int!, acceptedBag: Int!, totalAmount: Float!): Book!
    deleteBook(id: ID!): Boolean

    addVehicleOwner(firstName: String!, lastName: String!, email: String!, password: String!, address: String!,phoneNumber: String!, vehicleName: String!, vehicleType: String!, bagCapacity: String!):VehicleOwner!
    updateVehicleOwner(id: ID!, firstName: String!, lastName: String, email: String, password: String, address: String,phoneNumber: String, vehicleName: String, vehicleType: String, bagCapacity: String):VehicleOwner!
    deleteVehicleOwner(id: ID!): Boolean

    addSchedule(date: String!, maxAllowedBag: Int!, amountPerBag: Float!, departureTime: String!, departureLocation: String!, destinationLocation: String!, vehicleOwner_id: ID!):Schedule!
    updateSchedule(id: ID!, date: String!, maxAllowedBag: Int!, amountPerBag: Float!, departureTime: String!, departureLocation: String!, destinationLocation: String!,):Schedule!
    deleteSchedule(id: ID!):Boolean

    addFarmer(firstName: String!, lastName:String!, email: String!, password: String!, address: String!, phoneNumber: String!, currentCrops: String!, futureCrops: String!):Farmer!
    updateFarmer(id: ID!, firstName: String!, lastName:String!, email: String!, password: String!, address: String!, phoneNumber: String!, currentCrops: String!, futureCrops: String!):Farmer!
    deleteFarmer(id: ID!):Boolean

    loginUser(type:String!, token:String!, email:String!, password:String!):FarmerLogin!
    logoutUser(id:ID!):Boolean

}

type FarmerLogin {
    id: ID
    type: String!
    token: String!
    email: String!
    password: String!
}


type Admin {
    id: ID
    username: String!
    password: String!
}


type VehicleOwner {
    id: ID
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    address: String!
    phoneNumber: String!
    vehicleName: String!
    vehicleType: String!
    bagCapacity: String!
}

type Book {
    id: ID
    requestedBag: Int
    acceptedBag: Int!
    totalAmount: Float!
    schedule: Schedule!
    farmer: Farmer!
}

type Schedule {
    id: ID
    date: String!
    maxAllowedBag: Int!
    amountPerBag: Float!
    departureTime: String!
    departureLocation: String!
    destinationLocation: String!
    vehicleOwner: VehicleOwner!
}

type Farmer {
    id: ID
    firstName: String!
    lastName:String!
    email: String!
    password: String!
    address: String!
    phoneNumber: String!
    currentCrops: String!
    futureCrops: String!
}
